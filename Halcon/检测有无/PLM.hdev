<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.0" halcon_version="10.0" cs="41834636">
<procedure name="main">
<interface/>
<body>
<c>* This example program shows how to segment an RGB image with an MLP</c>
<c>* classifier.  The classifier is trained with four different colors.  Note that the</c>
<c>* resulting classification is intuitively correct.  However, it can also be seen</c>
<c>* that colors that lie outside of the range of the trained classes will be assigned</c>
<c>* to one of the classes with a high confidence.  In this image, the yellow paint</c>
<c>* at the ship's rail, the green color on the light of the top of the ship, and the door</c>
<c>* are assigned to one of the four classes with a high confidence.</c>
<l>dev_update_pc ('off')</l>
<l>dev_update_window ('off')</l>
<l>dev_update_var ('off')</l>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, 735, 485, 'black', WindowHandle)</l>
<l>set_display_font (WindowHandle, 14, 'mono', 'true', 'false')</l>
<l>dev_set_draw ('margin')</l>
<l>dev_set_colored (6)</l>
<l>dev_set_line_width (3)</l>
<l>read_image (Image, 'C:/Code/Halcon/检测有无/'+2+'.jpg')</l>
<l>dev_display (Image)</l>
<c>* Create regions that contain the training samples of the four classes.</c>
<l>draw_rectangle2(WindowHandle, Row, Column, Phi, Length1, Length2)</l>
<l>gen_rectangle2(cake, Row, Column, Phi, Length1, Length2)</l>
<c></c>
<l>draw_rectangle2(WindowHandle, Row1, Column1, Phi1, Length11, Length21)</l>
<l>gen_rectangle2(desk, Row1, Column1, Phi1, Length11, Length21)</l>
<c></c>
<c></c>
<l>draw_rectangle2(WindowHandle, Row2, Column2, Phi2, Length12, Length22)</l>
<l>gen_rectangle2(plastic, Row2, Column2, Phi2, Length12, Length22)</l>
<c></c>
<l>draw_rectangle2(WindowHandle, Row3, Column3, Phi3, Length13, Length23)</l>
<l>gen_rectangle1(target, Row3, Column3, Row3, Column3)</l>
<c></c>
<c></c>
<c></c>
<l>concat_obj (cake, desk, Classes)</l>
<l>concat_obj (Classes, plastic, Classes)</l>
<l>concat_obj(Classes, target, Classes)</l>
<c></c>
<c></c>
<l>dev_set_color ('yellow')</l>
<l>dev_display (cake)</l>
<l>dev_set_color ('slate blue')</l>
<l>dev_display (desk)</l>
<l>dev_set_color ('green')</l>
<l>dev_display (plastic)</l>
<c></c>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* Create the classifier and add the samples.</c>
<l>create_class_mlp (3, 3, 4, 'softmax', 'principal_components', 3, 42, MLPHandle)</l>
<l>add_samples_image_class_mlp (Image, Classes, MLPHandle)</l>
<l>dev_display (Image)</l>
<l>disp_message (WindowHandle, 'Training the classifier...', 'image', -1, -1, 'black', 'true')</l>
<c>* Train the classifier.</c>
<l>train_class_mlp (MLPHandle, 200, 1, 0.01, Error, ErrorLog)</l>
<l>dev_display (Image)</l>
<l>disp_message (WindowHandle, 'Segmenting the image by means of the classifier', 'image', -1, -1, 'black', 'true')</l>
<c>* Segment (classify) the image.</c>
<l>classify_image_class_mlp (Image, ClassRegions, MLPHandle, 0.5)</l>
<l>region_to_mean (ClassRegions, Image, ImageClass)</l>
<l>write_class_mlp(MLPHandle, 'mlp_3.gmc')</l>
<l>dev_display (ImageClass)</l>
<l>disp_message (WindowHandle, 'Done!', 'image', -1, -1, 'black', 'true')</l>
<l>clear_class_mlp (MLPHandle)</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* Since the three colors described above are assigned to one of the classes, we</c>
<c>* will construct an explicit rejection class that contains samples from each color</c>
<c>* and will re-train the classifier with the rejection class.</c>
<l>gen_rectangle2 (Rejection, [192.74,65.6,261.15], [235.16,332.17,327.83], [-0.319697,-1.448844,-1.507204], [33,34,60], [4,3,3])</l>
<l>union1 (Rejection, Rejection)</l>
<l>concat_obj (Classes, Rejection, Classes)</l>
<l>dev_display (Image)</l>
<l>dev_set_color ('yellow')</l>
<l>dev_display (Deck)</l>
<l>dev_set_color ('slate blue')</l>
<l>dev_display (Sea)</l>
<l>dev_set_color ('green')</l>
<l>dev_display (Walls)</l>
<l>dev_set_color ('magenta')</l>
<l>dev_display (Walls)</l>
<l>dev_set_color ('red')</l>
<l>dev_display (Rejection)</l>
<l>disp_message (WindowHandle, 'Add a rejection class to improve the robustness of the classifier', 'image', -1, -1, 'black', 'true')</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<l>dev_display (Image)</l>
<c>* Create the classifier and add the samples.</c>
<l>create_class_mlp (3, 4, 5, 'softmax', 'principal_components', 3, 42, MLPHandle)</l>
<l>add_samples_image_class_mlp (Image, Classes, MLPHandle)</l>
<c>* Train the classifier.</c>
<l>disp_message (WindowHandle, 'Training the classifier with rejection class...', 'image', -1, -1, 'black', 'true')</l>
<l>train_class_mlp (MLPHandle, 200, 1, 0.01, Error, ErrorLog)</l>
<l>dev_display (Image)</l>
<l>disp_message (WindowHandle, 'Segmenting the image by means of the classifier', 'image', -1, -1, 'black', 'true')</l>
<c>* Segment (classify) the image.</c>
<l>classify_image_class_mlp (Image, ClassRegionsNotRejected, MLPHandle, 0.5)</l>
<c>* Select every class except the rejection class.</c>
<l>copy_obj (ClassRegionsNotRejected, ClassRegionsNotRejected, 1, 4)</l>
<c>* Note that the black areas in the mean image correspond to the rejected pixels.</c>
<l>region_to_mean (ClassRegionsNotRejected, Image, ImageClassNotRejected)</l>
<l>dev_display (ImageClassNotRejected)</l>
<l>disp_message (WindowHandle, 'Improved segmentation', 'image', -1, -1, 'black', 'true')</l>
<l>clear_class_mlp (MLPHandle)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
