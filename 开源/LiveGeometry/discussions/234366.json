[
  {
    "Id": "520778",
    "ThreadId": "234366",
    "Html": "\r\n<p>Hi Kirill,</p>\r\n<p>I studied your sample and now I think I know a lot more about the sequence of building complex shapes, like a rectangle.&nbsp; I took your advice and created a macro to create a rectangle and used SquareCreator as an example.&nbsp; I wish I could tell you\r\n that I got it working 100% without problem, but, I fell short at one of the steps.&nbsp; Here is the code I came up with and it almost works, but, I can't seem to correctly add an IntersectionPoint.&nbsp; I built a class called RectangleCreator.&nbsp; Can\r\n you see what I am leaving out?&nbsp; I think your original advice lead me to learn so much more about LG.&nbsp; Thanks!</p>\r\n<p>Best regards, <br>\r\nChris</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">using</span> System.Collections.Generic;\r\n<span style=\"color:blue\">using</span> System.ComponentModel;\r\n<span style=\"color:blue\">using</span> System.Windows;\r\n<span style=\"color:blue\">using</span> System.Windows.Media;\r\n<span style=\"color:blue\">using</span> System.Diagnostics;\r\n\r\n<span style=\"color:blue\">namespace</span> DynamicGeometry\r\n{\r\n    [Category(BehaviorCategories.Shapes)]\r\n    [Order(2)]\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> RectangleCreator : ShapeCreator\r\n    {\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> IEnumerable&lt;IFigure&gt; CreateFigures()\r\n        {\r\n            <span style=\"color:blue\">var</span> p1 = FoundDependencies[0] <span style=\"color:blue\">as</span> IPoint;\r\n            <span style=\"color:blue\">var</span> p2 = FoundDependencies[1] <span style=\"color:blue\">as</span> IPoint;\r\n\r\n            <span style=\"color:blue\">var</span> side0 = Factory.CreateSegment(Drawing, p1, p2);\r\n            <span style=\"color:blue\">var</span> perpendicular = Factory.CreatePerpendicularLine(Drawing, <span style=\"color:blue\">new</span> IFigure[] { side0, p1 });\r\n            <span style=\"color:blue\">var</span> pointonfigure = Factory.CreatePointOnFigure(Drawing, perpendicular, <span style=\"color:blue\">new</span> Point());           \r\n            <span style=\"color:blue\">var</span> parallel1 = Factory.CreateParallelLine(Drawing, <span style=\"color:blue\">new</span> IFigure[] { perpendicular, p2 });\r\n            <span style=\"color:blue\">var</span> parallel2 = Factory.CreateParallelLine(Drawing, <span style=\"color:blue\">new</span> IFigure[] { side0, pointonfigure });\r\n            \r\n            <span style=\"color:green\">//Kirill, problems start when intersection is added.            </span>\r\n            <span style=\"color:blue\">var</span> intersection = Factory.CreateIntersectionPoint(Drawing, parallel1, parallel2, IntersectionAlgorithms.IntersectLineAndLine(parallel1, parallel2));\r\n\r\n            <span style=\"color:blue\">var</span> side1 = Factory.CreateSegment(Drawing, p2, intersection);\r\n\r\n            <span style=\"color:blue\">var</span> side2 = Factory.CreateSegment(Drawing, intersection, pointonfigure);\r\n\r\n            <span style=\"color:blue\">var</span> side3 = Factory.CreateSegment(Drawing, pointonfigure, p1);\r\n\r\n            <span style=\"color:blue\">var</span> polygon = Factory.CreatePolygon(Drawing, <span style=\"color:blue\">new</span> IFigure[] { p1, p2, intersection, pointonfigure });\r\n\r\n            <span style=\"color:blue\">#region</span> for debugging purposes\r\n\r\n            <span style=\"color:green\">//perpendicular.Name = &quot;perpendicular&quot;;</span>\r\n            <span style=\"color:green\">//parallel1.Name = &quot;parallel1&quot;;</span>\r\n            <span style=\"color:green\">//parallel2.Name = &quot;parallel2&quot;;</span>\r\n            <span style=\"color:green\">//side0.Name = &quot;side0&quot;;</span>\r\n            <span style=\"color:green\">//pointonfigure.Name = &quot;POF&quot;;</span>\r\n            <span style=\"color:green\">//intersection.Name = &quot;I&quot;;</span>\r\n\r\n            <span style=\"color:green\">//PointLabel plA = Factory.CreatePointLabel(Drawing, new IFigure[] {p1});</span>\r\n            <span style=\"color:green\">//plA.ShowName = true;</span>\r\n            <span style=\"color:green\">//PointLabel plB = Factory.CreatePointLabel(Drawing, new IFigure[] { p2 });</span>\r\n            <span style=\"color:green\">//plB.ShowName = true;</span>\r\n            <span style=\"color:gray\">///</span><span style=\"color:green\">/pointonfigure</span>\r\n            <span style=\"color:green\">//PointLabel plPOF = Factory.CreatePointLabel(Drawing, new IFigure[] { pointonfigure });</span>\r\n            <span style=\"color:green\">//plPOF.ShowName = true;</span>\r\n            <span style=\"color:green\">//PointLabel plI = Factory.CreatePointLabel(Drawing, new IFigure[] { intersection });</span>\r\n            <span style=\"color:green\">//plI.ShowName = true;</span>\r\n            <span style=\"color:gray\">///</span><span style=\"color:green\">/plA,</span>\r\n            <span style=\"color:gray\">///</span><span style=\"color:green\">/plB,</span>\r\n            <span style=\"color:gray\">///</span><span style=\"color:green\">/plPOF,</span>\r\n            <span style=\"color:gray\">///</span><span style=\"color:green\">/plI,</span>\r\n            \r\n            <span style=\"color:blue\">#endregion</span> //for debugging purposes\r\n\r\n            <span style=\"color:blue\">var</span> added = <span style=\"color:blue\">new</span> IFigure[]\r\n            {\r\n                side0,\r\n                perpendicular,\r\n                pointonfigure,\r\n                parallel1,\r\n                parallel2,\r\n                intersection,\r\n                side1,\r\n                side2,\r\n                side3,\r\n                polygon\r\n            };\r\n\r\n            perpendicular.Visible = <span style=\"color:blue\">false</span>;\r\n            parallel1.Visible = <span style=\"color:blue\">false</span>;\r\n            parallel2.Visible = <span style=\"color:blue\">false</span>;\r\n            \r\n\r\n            <span style=\"color:blue\">foreach</span> (<span style=\"color:blue\">var</span> item <span style=\"color:blue\">in</span> added)\r\n            {\r\n                yield <span style=\"color:blue\">return</span> item;\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> DependencyList InitExpectedDependencies()\r\n        {\r\n            <span style=\"color:blue\">return</span> DependencyList.PointPoint;\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">string</span> Name\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> <span style=\"color:#a31515\">&quot;Rectangle&quot;</span>; }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> FrameworkElement CreateIcon()\r\n        {\r\n            <span style=\"color:blue\">double</span> a = 0.2, b = 0.6, c = 0.8;\r\n            <span style=\"color:blue\">return</span> IconBuilder.BuildIcon()\r\n                .Polygon(\r\n                    <span style=\"color:blue\">new</span> SolidColorBrush(Color.FromArgb(255, 128, 255, 128)),\r\n                    <span style=\"color:blue\">new</span> SolidColorBrush(Colors.Black),\r\n                    <span style=\"color:blue\">new</span> Point(a, a),\r\n                    <span style=\"color:blue\">new</span> Point(b, a),\r\n                    <span style=\"color:blue\">new</span> Point(b, c),\r\n                    <span style=\"color:blue\">new</span> Point(a, c))\r\n                .Line(a, a, b, a)\r\n                .Line(b, a, b, c)\r\n                .Line(b, c, a, c)\r\n                .Line(a, c, a, a)\r\n                .DependentPoint(a, a)\r\n                .DependentPoint(b, a)\r\n                .Point(b, c)\r\n                .Point(a, c)\r\n                .Canvas;\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">string</span> HintText\r\n        {\r\n            <span style=\"color:blue\">get</span>\r\n            {\r\n                <span style=\"color:blue\">return</span> <span style=\"color:#a31515\">&quot;Create a rectangle&quot;</span>;\r\n            }\r\n        }\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n",
    "PostedDate": "2010-11-11T13:22:28.863-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "520944",
    "ThreadId": "234366",
    "Html": "\r\n<p>Chris,</p>\r\n<p>your code is correct. It revealed a bug in my code, which I've just fixed. Get the latest version of the source code (bug fix is in FigureCreator.cs) and you should be good.</p>\r\n<p>Hope this helps,</p>\r\n<p>Kirill</p>\r\n",
    "PostedDate": "2010-11-12T00:25:07.273-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "521119",
    "ThreadId": "234366",
    "Html": "\r\n<p>Kirill,</p>\r\n<p>All I can say is &quot;wooo - hooo&quot;!!!! Yes!&nbsp; ... Got it :-)</p>\r\n<p>I hope all is well,</p>\r\n<p>Chris</p>\r\n",
    "PostedDate": "2010-11-12T07:23:20.23-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]