[
  {
    "Id": "524163",
    "ThreadId": "235271",
    "Html": "\r\n<p>Hi Kirill,</p>\r\n<p>I know there is a &quot;join segments&quot; (JointTwoSegmentsCreator.cs)&nbsp;command that removes a freepoint from a segment.&nbsp; I always wondered why there wasn't a way to add a new freepoint to a polygon (or other shape).&nbsp; I wrote this &quot;SplitSegmentCreator.cs&quot;\r\n class to do just that.&nbsp; It only works on polygons and triangles.&nbsp; I tested it vigourously and there are two conditions that are somewhat problematic.&nbsp;</p>\r\n<p>Condition 1:</p>\r\n<p>1) Create three polygons that are joined by common points. <br>\r\n2) Select the &quot;Split Segment&quot; command (see code below) <br>\r\n3) Start selecting points on the different segments. <br>\r\n4) You'll eventually see that the colored area goes outside the bounds of the polygon.</p>\r\n<p>Condition 2:</p>\r\n<p>1) Create a square. <br>\r\n2) Select the &quot;Split Segment&quot; command (see code below) <br>\r\n3) Click on all sides. <br>\r\n4) Clicking one of the sides makes the whole thing collapse. <br>\r\n<br>\r\nI've read your coding standards and I am still polishing up this code for submission to the project if you think it is worth adding.&nbsp; I think it is, because, as a user I wondered why I couldn't change polygons after they were initially built.&nbsp; I worked\r\n for several days trying to allow this same functionality for polylines ... but, it proved to be too problematic.&nbsp; I got it to work in simple situations, but, things fell apart when the polyline got more complex.</p>\r\n<p>Here is the class:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">using</span> System.Collections.Generic;\r\n<span style=\"color:blue\">using</span> System.ComponentModel;\r\n<span style=\"color:blue\">using</span> System.Linq;\r\n<span style=\"color:blue\">using</span> System.Windows;\r\n<span style=\"color:blue\">using</span> System.Windows.Input;\r\n<span style=\"color:blue\">using</span> System.Diagnostics;\r\n<span style=\"color:blue\">using</span> System.Collections;\r\n\r\n<span style=\"color:blue\">namespace</span> DynamicGeometry\r\n{\r\n    [Category(BehaviorCategories.Lines)]\r\n    [Order(11)]\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> SplitSegmentCreator : Behavior\r\n    {\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> MouseDown(<span style=\"color:blue\">object</span> sender, MouseButtonEventArgs e)\r\n        {\r\n            <span style=\"color:blue\">var</span> coordinates = Coordinates(e);\r\n            <span style=\"color:blue\">var</span> segment = Drawing.Figures.HitTest&lt;Segment&gt;(coordinates);\r\n            <span style=\"color:blue\">if</span> (segment != <span style=\"color:blue\">null</span>)\r\n            {\r\n                JoinSegments(segment, coordinates);\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">void</span> JoinSegments(Segment segment, Point coordinates)\r\n        {\r\n            <span style=\"color:blue\">var</span> dependents = segment.Dependencies.OfType&lt;FreePoint&gt;().ToArray();\r\n            <span style=\"color:blue\">if</span> (dependents.Length != 2)\r\n            {\r\n                <span style=\"color:blue\">return</span>;\r\n            }\r\n\r\n            FreePoint freePoint1 = dependents[0];           \r\n            FreePoint freePoint2 = dependents[1];\r\n            FreePoint freePointJoiner = Factory.CreateFreePoint(Drawing, coordinates);\r\n            <span style=\"color:blue\">var</span> newsegment1 = Factory.CreateSegment(Drawing, <span style=\"color:blue\">new</span>[] { freePoint1, freePointJoiner });\r\n            <span style=\"color:blue\">var</span> newsegment2 = Factory.CreateSegment(Drawing, <span style=\"color:blue\">new</span>[] { freePointJoiner, freePoint2 });\r\n\r\n            <span style=\"color:blue\">using</span> (Drawing.ActionManager.CreateTransaction())\r\n            {\r\n                Actions.Remove(segment);\r\n                InsertPointToPolygons(freePoint1, freePointJoiner);\r\n                Actions.Add(Drawing, freePointJoiner);\r\n                Actions.Add(Drawing, newsegment1);\r\n                Actions.Add(Drawing, newsegment2);\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">void</span> InsertPointToPolygons(FreePoint existingpoint, FreePoint newpoint)\r\n        {\r\n            <span style=\"color:blue\">foreach</span> (<span style=\"color:blue\">var</span> polygon <span style=\"color:blue\">in</span> existingpoint.Dependents.OfType&lt;PolygonBase&gt;())\r\n            {\r\n                <span style=\"color:blue\">if</span> (polygon.Dependencies.Count &gt;= 3)\r\n                {\r\n                    InsertPointToPolygon(existingpoint, newpoint, polygon);\r\n                }\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">void</span> InsertPointToPolygon(FreePoint existingpoint, FreePoint point, PolygonBase polygon)\r\n        {\r\n            <span style=\"color:blue\">int</span> index = 0;\r\n            <span style=\"color:blue\">foreach</span> (IFigure ifigure <span style=\"color:blue\">in</span> polygon.Dependencies)\r\n            {\r\n                <span style=\"color:blue\">if</span> (ifigure.Name == existingpoint.Name)\r\n                {\r\n                    index&#43;&#43;;\r\n                    <span style=\"color:blue\">break</span>;\r\n                }\r\n                <span style=\"color:blue\">else</span>\r\n                {\r\n                    index&#43;&#43;;\r\n                }\r\n            }\r\n            Actions.InsertDependency(polygon, index, point);\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">string</span> Name\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> <span style=\"color:#a31515\">&quot;Split segment&quot;</span>; }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">string</span> HintText\r\n        {\r\n            <span style=\"color:blue\">get</span>\r\n            {\r\n                <span style=\"color:blue\">return</span> <span style=\"color:#a31515\">&quot;Click a segment to add a new point.&quot;</span>;\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> FrameworkElement CreateIcon()\r\n        {\r\n            <span style=\"color:blue\">return</span> IconBuilder.BuildIcon()\r\n                .Line(0.25, 0.75, 0.4, 0.4)\r\n                .Line(0.4, 0.4, 0.75, 0.25)\r\n                .Point(0.25, 0.75)\r\n                .Point(0.75, 0.25)\r\n                .Point(0.4, 0.4)\r\n                .Canvas;\r\n        }\r\n\r\n\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-11-18T22:21:09.243-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]